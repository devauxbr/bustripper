As a new developer of Ruter's advanced client technologies team, you have been given responsibility of their
commandline bus trip client! It is used to query the first 10 upcoming transports from a searchable area in Oslo.
The previous developer on this team has unfortunately resigned, and you are to take over.
The last thing he did was to rewrite the code from a synchronous to a parallel architecture, as there was many
complaints that the client was slow in getting all the bus trips.

Your assignment for the first hour of the day is;

1. Bugs have been filed on the client not supporting input of place names with characters other than letters
   (examples are 'St. Hanshaugen' or 'Telenor Fornebu'). Can you fix this?


 a) 'St. Hanshaugen’ causes a 404 error because “.” breaks Ruter’s REST query parameter recognition :

	Fix : replacement of any non literal/space character (Main.java line 76)

 b) 'Telenor Fornebu’ breaks because the first request made by FindBusStop.java not only retrieves "stops", but also entities of type "Area" and "POI"
    When the IDs of these entities are used to retrieve bus lines in FindBusLinesForStop.java, the corresponding requests have empty responses and break JSON deserialization  the BusTripsCallBack#completed() method (line 33) because variable "content" is empty. This causes the error message : "Failed getting trips. No content to map due to end-of-input at [Source: ; line: 1, column: 0]"

    Fix : only retrieve bus lines from entities of type "Stop" (BusStopsCallBack.java line 37)

2. The previous developer had intended that pressing both "q" and just <enter> at the query prompt should stop the
   program. It turns out only one of them works. Can you fix the other?

   The developer was trying to compare two strings with the "==" operator (Main.java line 63), but it only works with Primitive types. String is an Object type and so this operator only compares pointers (that is, if the two compared variables refers to the very same object in memory). Object#equals() method must be used instead.

   Fix : use of "q".equals() instead of "==" (Main.java line 69)

3. On some searches ('Fornebu' or 'Oslo'), more than 10 results are printed and the cursor is not positioned correctly.
   Can you fix this?

   The developer was using a "last" boolean (named "done" in Main.BustripWaiter.java) to target the last started Thread result and print the 10 first trips, as if Threads were running sequentially in the JVM. In reality concurrency order depends on a lot of parameters and the last started Thread may very likely not be the last to end. Furthermore the condition to print this result also depends on the fact the result set ("allTrips" variable) exceeds max result size of 10 (line 24). So as soon as the final result set exceeds this size or that the "last" tagged Thread ends, the Thread lock is released by the "notify()" method on line 37, and the cursor is printed. Then every time another Thread ends, the "allTrips" variable is sorted and the 10 most relevant trips are printed again. This is why more than 10 results are printed

   Fix : a simple solution is be to change "done || allTrips.size() >= maxtrips" condition to "!this.done && (done || allTrips.size() >= maxtrips)" (line 24), but it would potentially skip relevant trips that would still have not been received from running Threads and could appear in the 10 most interesting trip sorted by the stream on line 29. For a better solution, see question 4 below.

4. Perform a code review of the current code. Make notes of What works, identify bugs and suggest improvements.
   Prepare a discussion around your findings. There is no need to code corrections here.

   - Variables that are passed as parameters in constructors tend to be named differently in every classes, which reduces readability and comprehensibility (my opinion...)

   - According to this post : https://blogs.oracle.com/japod/entry/how_to_use_jersey_client, Jersey Client instances generation is the most expensive operation when dealing with Jersey REST Client library. As such, multi-threading here is not very efficient as every Thread must still generate its own new Client instance, and so the overhead dealing with multi-threading really doesn't worth it... Another approach would be to use java.util.concurrent.CountDownLatch to synchronize the receipt of every result or, even better, to use Reactive Jersey Client as stated and explained in the official Jersey documentation : https://jersey.java.net/documentation/latest/rx-client.html

5. Still there are complaints, that in situations where network is slow, the output of the bus lines are messy.
   What can be the explanations of these? Plan (but don't code) what needs to be changed to be more robust against
   slow networks.

   I believe answer 4 and 5 covered this problem ? The output certainly are messy as the results may be printed every time an HTTP responses is received and dealt by a Thread, which, if the network is slow, may take a few seconds. But as soon as the "notify()" method is called (Main.java line 37) the cursor is printed and the user is able to enter a new search, therefore it gives the feeling that results are outputed randomly even after control has been given back to user. A better approach for dealing concurrent HTTP requests (with CountDownLatch or Reactive Jersey Client) would fix the "messy output" issue, as the could not enter a new search until the previous search would be fully processed
